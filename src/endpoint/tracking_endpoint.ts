import { AftershipResponse } from '../model/aftership_response';
import { Tracking } from '../model/tracking/tracking'
import { TrackingRequest } from '../model/tracking/tracking_request'
import { TrackingsParams } from '../model/tracking/trackings_params'
import { TrackingParams } from '../model/tracking/tracking_params'
import { TrackingUpdate } from '../model/tracking/tracking_update_params'
import { TrackingList } from '../model/tracking/tracking_list'
/**
 * Create trackings, update trackings, and get tracking results.
 */
export interface TrackingEndpoint {
  /**
   * Create a tracking.
   * Either one id or (slug + tracking_number) should be specified.
   * @param tracking Tracking Request Object
   * @param id A unique identifier generated by AfterShip for the tracking.
   * @param slug Unique code of courier
   * @param tracking_number Tracking number of a shipment.
   */
  createTracking(
    tracking: TrackingRequest,
    id?: string,
    slug?: string,
    tracking_number?: string,
  ): Promise<AftershipResponse<Tracking>>

  /**
   * Delete a tracking.
   * Either one id or (slug + tracking_number) should be specified.
   * @param id A unique identifier generated by AfterShip for the tracking.
   * @param slug Unique code of courier
   * @param tracking_number Tracking number of a shipment.
   */
  deleteTracking(
    id?: string,
    slug?: string,
    tracking_number?: string,
  ): Promise<AftershipResponse<Tracking>>

  /**
   * Get tracking results of multiple trackings.
   * trackings_params to include: page,limit,keyword,slug,delivery_time,origin
   * ,destination,tag,created_at_min,created_at_max,fields,lang
   * @param trackings_params Trackings query params object
   * @param page Page to show. (Default: 1)
   * @param limit Number of trackings each page contain. (Default: 100, Max: 200)
   * @param keyword Search the content of the tracking record fields:tracking_number,
   *   title,  order_id,  customer_name,  custom_fields,  order_id,  emails,  smses
   * @param slug Unique courier code Use comma for multiple values. (Example: dhl,ups,usps)
   * @param delivery_time delivery_time
   * - Difference of 1st checkpoint time and delivered time for delivered shipments
   * - Difference of 1st checkpoint time and current time for non-delivered shipments
   * Value as 0 for pending shipments or delivered shipment with only one checkpoint.
   * @param origin Origin country of trackings. Use ISO Alpha-3 (three letters). Use comma for multiple values. (Example: USA,HKG)
   * @param destination Destination country of trackings.
   * Use ISO Alpha-3 (three letters). Use comma for multiple values. (Example: USA,HKG)
   * @param tag Current status of tracking. 
   * Values include Pending,  InfoReceived,  InTransit,  OutForDelivery, 
   *  AttemptFail,  Delivered,  AvailableForPickup,  Exception,  Expired(See tag definition)
   * @param created_at_min Start date and time of trackings created. 
   * AfterShip only stores data of 90 days. (Defaults: 30 days ago, Example: 2013-03-15T16:41:56+08:00)
   * @param created_at_max End date and time of trackings created. (Defaults: now, Example: 2013-04-15T16:41:56+08:00)
   * @param fields List of fields to include in the response. Use comma for multiple values. 
   * Fields to include: title,  order_id,  tag,  checkpoints,  checkpoint_time,  message,  country_name
   * Defaults: none, Example: title,order_id
   * @param lang Default: '' / Example: 'en' Support Chinese to English translation for  china-ems  and  china-post  only
   */
  listTrackings(trackings_params?: TrackingsParams): Promise<AftershipResponse<TrackingList>>

  /**
   * Get tracking results of a single tracking.
   * Either one id or (slug + tracking_number) should be specified.
   * tracking_params to include: fields, lang
   * @param id A unique identifier generated by AfterShip for the tracking.
   * @param slug Unique code of courier
   * @param tracking_number Tracking number of a shipment.
   * @param tracking_params Tracking query params object
   * @param fields List of fields to include in the response. 
   * Use comma for multiple values. 
   * Fields to include: tracking_postal_code,tracking_ship_date,tracking_account_number,
   * tracking_key,tracking_origin_country,tracking_destination_country,tracking_state,
   * title,order_id,tag,checkpoints,checkpoint_time, message, country_name
   * Defaults: none, Example: title,order_id
   * @param lang Support Chinese to English translation for china-ems  and  china-post  only (Example: en)
   */
  getTracking(
    id?: string,
    slug?: string,
    tracking_number?: string,
    tracking_params?: TrackingParams,
  ): Promise<AftershipResponse<Tracking>>

  /**
   * Update a tracking.
   * Either one id or (slug + tracking_number) should be specified.
   * tracking_update_params to include: smses, emails,title,customer_name,order_id,
   * order_id_path,custom_fields,note,language,order_promised_delivery_date,delivery_type,pickup_location,pickup_note
   * @param id A unique identifier generated by AfterShip for the tracking.
   * @param slug Unique code of courier
   * @param tracking_number Tracking number of a shipment.
   * @param tracking_update_params Tracking update params object
   * @param smses Phone number(s) to receive sms notifications.
   * @param emails Email address(es) to receive email notifications.
   * @param title Title of the tracking.
   * @param customer_name Customer name of the tracking.
   * @param order_id Text field for order ID
   * @param order_id_path Text field for order path
   * @param custom_fields Custom fields that accept a hash with string, boolean or number fields
   * @param note Text field for the note
   * @param language Enter ISO 639-1 Language Code to specify the store, customer or order language.
   * @param order_promised_delivery_date Promised delivery date of an order inYYYY-MM-DDformat.
   * @param delivery_type Shipment delivery type: Shipment delivery type,pickup_at_courier,door_to_door
   * @param pickup_location Shipment pickup location for receiver
   * @param pickup_note Shipment pickup note for receiver
   */
  updateTracking(
    id?: string,
    slug?: string,
    tracking_number?: string,
    tracking_update_params?: TrackingUpdate,
  ): Promise<AftershipResponse<Tracking>>

  /**
   * Retrack an expired tracking. Max 3 times per tracking.
   * Either one id or (slug + tracking_number) should be specified.
   * @param id A unique identifier generated by AfterShip for the tracking.
   * @param slug Unique code of courier
   * @param tracking_number Tracking number of a shipment.
   */
  retrack(
    id?: string,
    slug?: string,
    tracking_number?: string,
  ): Promise<AftershipResponse<Tracking>>
}